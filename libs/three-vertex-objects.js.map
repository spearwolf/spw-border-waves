{"version":3,"file":"three-vertex-objects.js.map","sources":["../src/constants.ts","../src/findNextPowerOf2.ts","../../node_modules/tslib/tslib.es6.js","../src/TextureAtlas.ts","../src/TextureCoords.ts","../src/TileSet.ts","../src/FrameBasedAnimations.ts","../src/getDescriptorOf.ts","../src/createTypedArray.ts","../src/createVertexObjectPrototype.ts","../src/VertexObjectBuffer.ts","../src/VertexAttributeDescriptor.ts","../src/VertexObjectDescriptor.ts","../src/VertexObjectPool.ts","../src/toDrawUsage.ts","../src/initializeAttributes.ts","../src/createIndicesArray.ts","../src/selectAttributes.ts","../src/selectBuffers.ts","../src/InstancedVertexObjectGeometry.ts","../src/initializeInstancedAttributes.ts","../src/isPowerOf2.ts","../src/PowerOf2ImageLoader.ts","../src/ShaderTool.ts","../src/TextureFactory.ts","../src/TextureFactoryLoader.ts","../src/TexturePackerJson.ts","../src/TileSetLoader.ts","../src/VertexObjectGeometry.ts","../src/VertexObjects.ts"],"sourcesContent":["/**\n * @category Vertex Objects\n */\nexport const voBuffer = Symbol('voBuffer');\n\n/**\n * @category Vertex Objects\n */\nexport const voIndex = Symbol('voIndex');\n","export const findNextPowerOf2 = (x: number): number => {\n  let p = 1;\n  while (x > p) p <<= 1;\n  return p;\n};\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","import {TextureCoords} from './TextureCoords';\n\n/**\n * @category Texture Mapping\n */\nexport type TextureAtlasFrameData = Record<string, any>;\n\n/**\n * @category Texture Mapping\n */\nexport interface TextureAtlasFrame {\n  coords: TextureCoords;\n  data?: TextureAtlasFrameData;\n}\n\ntype TextureAtlasArgs = [coords: TextureCoords, data?: TextureAtlasFrameData];\n\ntype TextureAtlasFrameName = string | symbol;\n\ntype NamedTextureAtlasArgs = [name: TextureAtlasFrameName, coords: TextureCoords, data?: TextureAtlasFrameData];\n\nconst isNamedTextureAtlasArgs = (args: TextureAtlasArgs | NamedTextureAtlasArgs): args is NamedTextureAtlasArgs =>\n  typeof args[0] === 'string' || typeof args[0] === 'symbol';\n\nconst rand = (max: number) => (Math.random() * max) | 0;\n\n/**\n * @category Texture Mapping\n */\nexport class TextureAtlas {\n  #frames: TextureAtlasFrame[] = [];\n  #frameNames: Map<TextureAtlasFrameName, number> = new Map();\n\n  /**\n   * returns the frame id.\n   * the frame id starts at 0 and increases by 1 each time you add another frame.\n   */\n  add(...args: TextureAtlasArgs | NamedTextureAtlasArgs): number {\n    const id = this.#frames.length;\n    if (isNamedTextureAtlasArgs(args)) {\n      this.#frameNames.set(args[0], id);\n      this.#frames.push({coords: args[1], data: args[2]});\n    } else {\n      this.#frames.push({coords: args[0], data: args[1]});\n    }\n    return id;\n  }\n\n  get size(): number {\n    return this.#frames.length;\n  }\n\n  get(id: number): TextureAtlasFrame | undefined {\n    return this.#frames[id];\n  }\n\n  frameId(name: TextureAtlasFrameName): number | undefined {\n    return this.#frameNames.get(name);\n  }\n\n  frame(name: TextureAtlasFrameName): TextureAtlasFrame | undefined {\n    return this.#frames[this.#frameNames.get(name)];\n  }\n\n  /**\n   * frame names that are symbols are not found here,\n   * but if no argument is given, all names are returned (including symbols)\n   */\n  frameNames(match?: string | RegExp): TextureAtlasFrameName[] {\n    const frameNames = Array.from(this.#frameNames.keys());\n    if (match != null) {\n      const regex = typeof match === 'string' ? new RegExp(match) : match;\n      return frameNames.filter((name) => typeof name === 'string' && regex.test(name));\n    }\n    return frameNames;\n  }\n\n  randomFrameId(): number {\n    return rand(this.#frames.length);\n  }\n\n  randomFrame(): TextureAtlasFrame {\n    return this.#frames[this.randomFrameId()];\n  }\n\n  randomFrameName(): TextureAtlasFrameName {\n    const randomIdx = rand(this.#frameNames.size);\n    let idx = 0;\n    for (const name of this.#frameNames.keys()) {\n      if (idx === randomIdx) {\n        return name;\n      }\n      ++idx;\n    }\n    return undefined;\n  }\n\n  randomFrameIds(count: number): number[] {\n    const frameIds: number[] = [];\n    for (let i = 0; i < count; i++) {\n      frameIds.push(this.randomFrameId());\n    }\n    return frameIds;\n  }\n\n  randomFrames(count: number): TextureAtlasFrame[] {\n    const frames: TextureAtlasFrame[] = [];\n    for (let i = 0; i < count; i++) {\n      frames.push(this.randomFrame());\n    }\n    return frames;\n  }\n\n  randomFrameNames(count: number): TextureAtlasFrameName[] {\n    const names: TextureAtlasFrameName[] = [];\n    for (let i = 0; i < count; i++) {\n      names.push(this.randomFrameName());\n    }\n    return names;\n  }\n}\n","const minCoord = (current: TextureCoords, scalarKey: 'x' | 'y', sizeKey: 'width' | 'height') => {\n  let texCoords: TextureCoords = current;\n  let scalar = 0;\n\n  while (texCoords.parent != null) {\n    scalar += texCoords[scalarKey];\n    texCoords = texCoords.parent;\n  }\n\n  return scalar / texCoords[sizeKey];\n};\n\nconst maxCoord = (current: TextureCoords, scalarKey: 'x' | 'y', sizeKey: 'width' | 'height') => {\n  let texCoords: TextureCoords = current;\n  let coord = current[sizeKey];\n\n  while (texCoords.parent != null) {\n    coord += texCoords[scalarKey];\n    texCoords = texCoords.parent;\n  }\n\n  return coord / texCoords[sizeKey];\n};\n\n/**\n * @category Texture Mapping\n */\nexport class TextureCoords {\n  static readonly FLIP_HORIZONTAL = 1;\n  static readonly FLIP_VERTICAL = 2;\n  static readonly FLIP_DIAGONAL = 4;\n\n  x = 0;\n  y = 0;\n\n  width = 0;\n  height = 0;\n\n  flip = 0;\n\n  parent?: TextureCoords;\n\n  constructor(\n    ...args:\n      | undefined\n      | [parent: TextureCoords, x?: number, y?: number, width?: number, height?: number]\n      | [x?: number, y?: number, width?: number, height?: number]\n  ) {\n    if (args[0] instanceof TextureCoords) {\n      this.parent = args[0];\n      this.x = args[1] ?? 0;\n      this.y = args[2] ?? 0;\n      this.width = args[3] ?? 0;\n      this.height = args[4] ?? 0;\n    } else if (args?.length) {\n      this.x = args[0] ?? 0;\n      this.y = args[1] ?? 0;\n      this.width = args[2] ?? 0;\n      this.height = args[3] ?? 0;\n    }\n  }\n\n  clone(): TextureCoords {\n    const texCoords = new TextureCoords();\n    texCoords.parent = this.parent;\n    texCoords.x = this.x;\n    texCoords.y = this.y;\n    texCoords.width = this.width;\n    texCoords.height = this.height;\n    texCoords.flip = this.flip;\n    return texCoords;\n  }\n\n  get root(): TextureCoords | undefined {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let root: TextureCoords = this;\n    while (root.parent) {\n      root = root.parent;\n    }\n    return root;\n  }\n\n  get flipH(): boolean {\n    return (this.flip & TextureCoords.FLIP_HORIZONTAL) > 0;\n  }\n\n  set flipH(flip: boolean) {\n    this.flip =\n      (flip ? TextureCoords.FLIP_HORIZONTAL : 0) | (this.flip & (TextureCoords.FLIP_VERTICAL | TextureCoords.FLIP_DIAGONAL));\n  }\n\n  get flipV(): boolean {\n    return (this.flip & TextureCoords.FLIP_VERTICAL) > 0;\n  }\n\n  set flipV(flip: boolean) {\n    this.flip =\n      (flip ? TextureCoords.FLIP_VERTICAL : 0) | (this.flip & (TextureCoords.FLIP_HORIZONTAL | TextureCoords.FLIP_DIAGONAL));\n  }\n\n  get flipD(): boolean {\n    return (this.flip & TextureCoords.FLIP_DIAGONAL) > 0;\n  }\n\n  set flipD(flip: boolean) {\n    this.flip =\n      (flip ? TextureCoords.FLIP_DIAGONAL : 0) | (this.flip & (TextureCoords.FLIP_VERTICAL | TextureCoords.FLIP_HORIZONTAL));\n  }\n\n  flipHorizontal(): TextureCoords {\n    this.flipH = !this.flipH;\n    return this;\n  }\n\n  flipVertical(): TextureCoords {\n    this.flipV = !this.flipV;\n    return this;\n  }\n\n  flipDiagonal(): TextureCoords {\n    this.flipD = !this.flipD;\n    return this;\n  }\n\n  get s(): number {\n    const {flipD} = this;\n    return this.flipH\n      ? maxCoord(this, flipD ? 'y' : 'x', flipD ? 'height' : 'width')\n      : minCoord(this, flipD ? 'y' : 'x', flipD ? 'height' : 'width');\n  }\n\n  get t(): number {\n    const {flipD} = this;\n    return this.flipV\n      ? maxCoord(this, flipD ? 'x' : 'y', flipD ? 'width' : 'height')\n      : minCoord(this, flipD ? 'x' : 'y', flipD ? 'width' : 'height');\n  }\n\n  get s1(): number {\n    const {flipD} = this;\n    return this.flipH\n      ? minCoord(this, flipD ? 'y' : 'x', flipD ? 'height' : 'width')\n      : maxCoord(this, flipD ? 'y' : 'x', flipD ? 'height' : 'width');\n  }\n\n  get t1(): number {\n    const {flipD} = this;\n    return this.flipV\n      ? minCoord(this, flipD ? 'x' : 'y', flipD ? 'width' : 'height')\n      : maxCoord(this, flipD ? 'x' : 'y', flipD ? 'width' : 'height');\n  }\n\n  get u(): number {\n    return this.s1 - this.s;\n  }\n\n  get v(): number {\n    return this.t1 - this.t;\n  }\n}\n","import {TextureAtlas, TextureAtlasFrame} from './TextureAtlas';\nimport {TextureCoords} from './TextureCoords';\n\n//\n// +---------------------------------------------+\n// |         margin                              |\n// |   +---------------+-----+---------------+   |\n// |   |    padding    |     |    padding    |   |\n// |   |  +---------+  |     |  +---------+  |   |\n// |   |  |.........|  |     |  |.........|  |   |\n// |   |  |.........|  |     |  |.........|  |   |\n// |   |  |.........|  |     |  |.........|  |   |\n// |   |  +---------+  |     |  +---------+  |   |\n// |   |               |     |               |   |\n// |   +---------------+     +---------------+   |\n// |   |               spacing               |   |\n// |   +---------------+     +---------------+   |\n// |   |    padding    |     |    padding    |   |\n// |   |  +---------+  |     |  +---------+  |   |\n// |   |  |.........|  |     |  |.........|  |   |\n// |   |  |.........|  |     |  |.........|  |   |\n// |   |  |.........|  |     |  |.........|  |   |\n// |   |  +---------+  |     |  +---------+  |   |\n// |   |               |     |               |   |\n// |   +---------------+-----+---------------+   |\n// |         margin                              |\n// +---------------------------------------------+\n//\n\nconst rand = (max: number) => (Math.random() * max) | 0;\n\n/**\n * @category Texture Mapping\n */\nexport interface TileSetOptions {\n  tileWidth?: number;\n  tileHeight?: number;\n\n  margin?: number;\n  spacing?: number;\n  padding?: number;\n\n  tileCount?: number;\n\n  firstId?: number;\n}\n\n/**\n * The [[TileSet]] maps _tileIds_ to _frameIds_.\n * Unlike the `frameId` of [[TextureAtlas]], the `tileId` starts at 1 by default (but is optionally configurable using the `firstId` option).\n * The `frameId` range of a [[TileSet]] starts at `firstFrameId` and goes without gaps to up to `firstFrameId + tileCount - 1`.\n *\n * @category Texture Mapping\n */\nexport class TileSet {\n  readonly atlas: TextureAtlas;\n  readonly baseCoords: TextureCoords;\n  readonly options: TileSetOptions;\n\n  tileCount = 0;\n\n  /**\n   * The `frameId` of the _first_ tile\n   */\n  firstFrameId = -1;\n\n  constructor(...args: [TextureAtlas, TextureCoords, TileSetOptions?] | [TextureCoords, TileSetOptions?]) {\n    if (args[0] instanceof TextureAtlas) {\n      const [atlas, baseCoords, options] = args as [TextureAtlas, TextureCoords, TileSetOptions];\n      this.atlas = atlas;\n      this.baseCoords = baseCoords;\n      this.options = options;\n    } else {\n      this.atlas = new TextureAtlas();\n      const [baseCoords, options] = args as [TextureCoords, TileSetOptions];\n      this.baseCoords = baseCoords;\n      this.options = options;\n    }\n    this.#createTextureCoords();\n  }\n\n  get tileWidth(): number {\n    return this.options?.tileWidth ?? this.baseCoords.width;\n  }\n\n  get tileHeight(): number {\n    return this.options?.tileHeight ?? this.baseCoords.height;\n  }\n\n  /**\n   * The `tileId` of the _first_ tile\n   */\n  get firstId(): number {\n    return this.options?.firstId ?? 1;\n  }\n\n  /**\n   * The `tileId` of the _last_ tile\n   */\n  get lastId(): number {\n    return this.firstId + this.tileCount - 1;\n  }\n\n  /**\n   * The `frameId` of the _last_ tile\n   */\n  get lastFrameId(): number {\n    return this.firstFrameId + this.tileCount - 1;\n  }\n\n  get tileCountLimit(): number {\n    return this.options?.tileCount ?? Infinity;\n  }\n\n  get margin(): number {\n    return this.options?.margin ?? 0;\n  }\n\n  get padding(): number {\n    return this.options?.padding ?? 0;\n  }\n\n  get spacing(): number {\n    return this.options?.spacing ?? 0;\n  }\n\n  frameId(tileId: number): number {\n    return ((((tileId - this.firstId) % this.tileCount) + this.tileCount) % this.tileCount) + this.firstFrameId;\n  }\n\n  randomTileId(): number {\n    return this.firstId + rand(this.tileCount);\n  }\n\n  randomFrameId(): number {\n    return this.firstFrameId + rand(this.tileCount);\n  }\n\n  frame(tileId: number): TextureAtlasFrame {\n    return this.atlas.get(this.frameId(tileId));\n  }\n\n  randomFrame(): TextureAtlasFrame {\n    return this.atlas.get(this.randomFrameId());\n  }\n\n  #createTextureCoords = (): void => {\n    const {width: baseWidth, height: baseHeight} = this.baseCoords;\n\n    const {padding, margin, spacing, tileCountLimit} = this;\n\n    const tileOuterWidth = this.tileWidth + (padding << 1);\n    const tileOuterHeight = this.tileHeight + (padding << 1);\n\n    let x = margin;\n    let y = margin;\n    let tileCount = 0;\n\n    while (1) {\n      const coords = new TextureCoords(this.baseCoords, x + padding, y + padding, this.tileWidth, this.tileHeight);\n\n      const frameId = this.atlas.add(coords);\n\n      if (this.firstFrameId === -1) {\n        this.firstFrameId = frameId;\n      }\n\n      ++tileCount;\n\n      if (tileCountLimit !== Infinity && tileCount === tileCountLimit) {\n        break;\n      }\n\n      const xOffsetNext = tileOuterWidth + spacing;\n\n      if (x + xOffsetNext + tileOuterWidth + margin <= baseWidth) {\n        x += xOffsetNext;\n      } else {\n        x = margin;\n        y += tileOuterHeight + spacing;\n        if (y + tileOuterHeight + margin > baseHeight) {\n          break;\n        }\n      }\n    }\n\n    this.tileCount = tileCount;\n  };\n}\n","import {DataTexture, FloatType, RGBAFormat} from 'three';\n\nimport {TextureAtlas} from './TextureAtlas';\nimport {TextureCoords} from './TextureCoords';\nimport {TileSet} from './TileSet';\nimport {findNextPowerOf2} from './findNextPowerOf2';\n\ntype AnimName = string | symbol;\n\n/**\n * @category Texture Mapping\n */\nexport interface FrameBasedAnimDef {\n  frames: TextureCoords[];\n  duration: number;\n  name: AnimName;\n  id: number;\n}\n\n/**\n * @category Texture Mapping\n */\nexport interface BakeTextureOptions {\n  includeTextureSize: boolean;\n}\n\ntype AnimationsMap = Map<AnimName, FrameBasedAnimDef>;\n\nconst getBufferSize = (animationsMap: AnimationsMap, sizePerTexture = 1, maxTextureSize = 16384) => {\n  const anims = Array.from(animationsMap.values());\n  const totalFramesCount = anims.reduce((sum, anim) => sum + anim.frames.length, 0);\n  const minBufSize = anims.length + totalFramesCount * sizePerTexture;\n  const bufSize = findNextPowerOf2(minBufSize);\n\n  if (bufSize > maxTextureSize) {\n    throw new Error('TODO too many animation frames - we need better way here to calculate a corresponding buffer size!');\n  }\n\n  return bufSize;\n};\n\nconst renderFloatsBuffer = (\n  floatsBuffer: Float32Array,\n  names: AnimName[],\n  animations: AnimationsMap,\n  includeTextureSize: boolean,\n) => {\n  let curOffset = names.length;\n\n  floatsBuffer.set(\n    names.flatMap((name) => {\n      const {frames, duration} = animations.get(name);\n      const offset = curOffset;\n      curOffset += frames.length * (includeTextureSize ? 2 : 1);\n      return [frames.length, duration, offset, 0];\n    }),\n  );\n\n  floatsBuffer.set(\n    includeTextureSize\n      ? names.flatMap((name) =>\n          animations.get(name).frames.flatMap(({s, t, u, v, width, height}) => [s, t, u, v, width, height, 0, 0]),\n        )\n      : names.flatMap((name) => animations.get(name).frames.flatMap(({s, t, u, v}) => [s, t, u, v])),\n    names.length * 4,\n  );\n\n  return floatsBuffer;\n};\n\n/**\n * @category Texture Mapping\n */\nexport class FrameBasedAnimations {\n  static MaxTextureSize = 16384;\n\n  #animations: AnimationsMap = new Map();\n\n  // we can not just use animations.keys() here, because we need a consistent name <-> id mapping\n  #names: AnimName[] = [];\n\n  add(\n    // TODO support args without first anim-frame parameter\n    ...args:\n      | [\n          name: AnimName | undefined,\n          duration: number,\n          // TODO support frameRate (fps) option as an alternative to duration\n          texCoords: TextureCoords[],\n        ]\n      | [name: AnimName | undefined, duration: number, atlas: TextureAtlas, frameNameQuery?: string]\n      | [name: AnimName | undefined, duration: number, tileSet: TileSet, firstTileId?: number, tileCount?: number]\n      | [name: AnimName | undefined, duration: number, tileSet: TileSet, tileIds: number[]]\n  ): number {\n    let [name] = args;\n\n    if (name) {\n      if (this.#animations.has(name)) {\n        throw new Error(`name='${name.toString()}' must be unique!`);\n      }\n    } else {\n      name = Symbol('n/a');\n    }\n\n    let frames: TextureCoords[];\n\n    if (Array.isArray(args[2])) {\n      frames = args[2];\n    } else if (args[2] instanceof TextureAtlas) {\n      const atlas = args[2];\n      const frameNames = atlas.frameNames(args[3] as any).sort();\n      frames = frameNames.map((frameName) => atlas.frame(frameName).coords);\n    } else if (args[2] instanceof TileSet) {\n      const tileSet = args[2];\n      if (Array.isArray(args[3])) {\n        const tileIds = args[3];\n        frames = tileIds.map((tileId) => tileSet.frame(tileId).coords);\n      } else {\n        const firstTileId = (args[3] as number | undefined) ?? tileSet.firstId;\n        const tileCount: number = args[4] ?? tileSet.tileCount;\n        frames = [];\n        for (let tileId = firstTileId; tileId < firstTileId + tileCount; tileId++) {\n          frames.push(tileSet.frame(tileId).coords);\n        }\n      }\n    }\n\n    const id = this.#names.length;\n    const [, duration] = args;\n\n    this.#names.push(name);\n    this.#animations.set(name, {\n      id,\n      name,\n      frames,\n      duration,\n    });\n\n    return id;\n  }\n\n  animId(name: AnimName): number {\n    return this.#animations.get(name).id;\n  }\n\n  bakeDataTexture(options?: BakeTextureOptions): DataTexture {\n    const includeTextureSize = Boolean(options?.includeTextureSize);\n\n    const bufSize = getBufferSize(this.#animations, includeTextureSize ? 2 : 1, FrameBasedAnimations.MaxTextureSize);\n\n    const floatsBuffer = renderFloatsBuffer(new Float32Array(bufSize * 4), this.#names, this.#animations, includeTextureSize);\n\n    return new DataTexture(floatsBuffer, bufSize, 1, RGBAFormat, FloatType);\n  }\n}\n","import {VertexObjectDescriptor} from './VertexObjectDescriptor';\nimport {voBuffer} from './constants';\nimport {VO} from './types';\n\n/**\n * @category Vertex Objects\n */\nexport function getDescriptorOf(vo: VO): VertexObjectDescriptor {\n  return vo[voBuffer].descriptor;\n}\n","import {TypedArray, VertexAttributeDataType} from './types';\n\nexport function createTypedArray(dataType: VertexAttributeDataType, size: number): TypedArray {\n  switch (dataType) {\n    case 'float64':\n      return new Float64Array(size);\n    case 'float32':\n      return new Float32Array(size);\n    case 'float16':\n      return new Uint16Array(size);\n    case 'uint32':\n      return new Uint32Array(size);\n    case 'int32':\n      return new Int32Array(size);\n    case 'uint16':\n      return new Uint16Array(size);\n    case 'int16':\n      return new Int16Array(size);\n    case 'uint8':\n      return new Uint8Array(size);\n    case 'uint8clamped':\n      return new Uint8ClampedArray(size);\n    case 'int8':\n      return new Int8Array(size);\n    default:\n      throw new Error(`unknown typed-array data-type: '${dataType}'`);\n  }\n}\n","import {VertexObjectBuffer} from './VertexObjectBuffer';\nimport {voBuffer, voIndex} from './constants';\nimport {createTypedArray} from './createTypedArray';\nimport {VO} from './types';\n\nconst toPascalCase = (str: string) => str.replace(/(^|_)([a-z])/g, (_match: string, _m0: string, m1: string) => m1.toUpperCase());\n\nconst makeAttributeGetter = (bufferName: string, instanceOffset: number, attrOffset: number) => {\n  return function getAttribute(this: VO) {\n    const idx = this[voIndex] * instanceOffset + attrOffset;\n    const buf = this[voBuffer].buffers.get(bufferName);\n    return buf.typedArray[idx];\n  };\n};\n\nconst makeAttributeSetter = (bufferName: string, instanceOffset: number, attrOffset: number) => {\n  return function setAttribute(this: VO, value: number) {\n    const idx = this[voIndex] * instanceOffset + attrOffset;\n    const buf = this[voBuffer].buffers.get(bufferName);\n    buf.typedArray[idx] = value;\n  };\n};\n\nconst makeAttributeValuesGetter = (\n  bufferName: string,\n  bufferItemSize: number,\n  vertexCount: number,\n  attrOffset: number,\n  attrSize: number,\n) => {\n  return function getAttributeValues(this: VO) {\n    const idx = this[voIndex] * vertexCount * bufferItemSize + attrOffset;\n    const buf = this[voBuffer].buffers.get(bufferName);\n    const source = buf.typedArray;\n    const target = createTypedArray(buf.dataType, vertexCount * attrSize);\n    for (let i = 0; i < vertexCount; i++) {\n      if (attrSize === 1) {\n        target[i] = source[idx + i * bufferItemSize];\n      } else {\n        target.set(source.subarray(idx + i * bufferItemSize, idx + i * bufferItemSize + attrSize), i * attrSize);\n      }\n    }\n    return target;\n  };\n};\n\nconst makeAttributeValueSetter = (\n  bufferName: string,\n  bufferItemSize: number,\n  vertexCount: number,\n  attrOffset: number,\n  attrSize: number,\n) => {\n  return function setAttributeValues(this: VO, ...values: number[] | [ArrayLike<number>]) {\n    const source = values.length === 1 && Array.isArray(values[0]) ? values[0] : values;\n    const idx = this[voIndex] * vertexCount * bufferItemSize + attrOffset;\n    const target = this[voBuffer].buffers.get(bufferName).typedArray;\n    for (let i = 0; i < vertexCount; i++) {\n      if (attrSize === 1) {\n        target[idx + i * bufferItemSize] = source[i];\n      } else {\n        target.set(Array.prototype.slice.call(source, i * attrSize, i * attrSize + attrSize), idx + i * bufferItemSize);\n      }\n    }\n  };\n};\n\nexport function createVertexObjectPrototype(voBuffer: VertexObjectBuffer, basePrototype: Object | null | undefined): Object {\n  const {descriptor} = voBuffer;\n  const props = Object.fromEntries(\n    descriptor.attributeNames.flatMap((attrName) => {\n      const attr = descriptor.getAttribute(attrName);\n      const bufAttr = voBuffer.bufferAttributes.get(attrName);\n      const buf = voBuffer.buffers.get(bufAttr.bufferName);\n      const AttrName = toPascalCase(attrName);\n\n      const methods: any[] = [];\n      if (descriptor.vertexCount === 1 && attr.size === 1) {\n        methods.push([\n          attrName,\n          {\n            enumerable: true,\n            get: makeAttributeGetter(bufAttr.bufferName, buf.itemSize, bufAttr.offset),\n            set: makeAttributeSetter(bufAttr.bufferName, buf.itemSize, bufAttr.offset),\n          },\n        ]);\n      } else {\n        methods.push(\n          [\n            `get${AttrName}`,\n            {\n              enumerable: true,\n              value: makeAttributeValuesGetter(\n                bufAttr.bufferName,\n                buf.itemSize,\n                descriptor.vertexCount,\n                bufAttr.offset,\n                attr.size,\n              ),\n            },\n          ],\n          [\n            `set${AttrName}`,\n            {\n              enumerable: true,\n              value: makeAttributeValueSetter(\n                bufAttr.bufferName,\n                buf.itemSize,\n                descriptor.vertexCount,\n                bufAttr.offset,\n                attr.size,\n              ),\n            },\n          ],\n        );\n      }\n      if (attr.hasComponents) {\n        attr.components.forEach((component, componentIndex) => {\n          for (let vertexIndex = 0; vertexIndex < descriptor.vertexCount; vertexIndex++) {\n            const instanceOffset = descriptor.vertexCount * buf.itemSize;\n            const attrOffset = vertexIndex * buf.itemSize + bufAttr.offset + componentIndex;\n            if (descriptor.vertexCount > 1 || component !== attr.name) {\n              methods.push([\n                `${component}${descriptor.vertexCount === 1 ? '' : vertexIndex}`,\n                {\n                  enumerable: true,\n                  get: makeAttributeGetter(bufAttr.bufferName, instanceOffset, attrOffset),\n                  set: makeAttributeSetter(bufAttr.bufferName, instanceOffset, attrOffset),\n                },\n              ]);\n            }\n          }\n        });\n      }\n      return methods;\n    }),\n  );\n  return Object.create(basePrototype !== undefined ? basePrototype : Object.prototype, props);\n}\n","import {VertexObjectDescriptor} from './VertexObjectDescriptor';\nimport {createTypedArray} from './createTypedArray';\nimport {createVertexObjectPrototype} from './createVertexObjectPrototype';\nimport {TypedArray, VertexAttributeDataType, VertexAttributeUsageType} from './types';\nimport {VertexObjectBuffersData} from '.';\n\ninterface BufferAttribute {\n  bufferName: string;\n  attributeName: string;\n  offset: number;\n}\n\ninterface Buffer {\n  bufferName: string;\n  itemSize: number;\n  dataType: VertexAttributeDataType;\n  usageType: VertexAttributeUsageType;\n  typedArray: TypedArray;\n  // serial?\n  // needsUpdate?\n  // autoTouch\n  // THREE->bufferAttribute?\n}\n\n/**\n * @category Vertex Objects\n */\nexport class VertexObjectBuffer {\n  readonly descriptor: VertexObjectDescriptor;\n  readonly capacity: number;\n\n  /** the names are always sorted the same way */\n  readonly attributeNames: readonly string[];\n\n  readonly buffers: Map<string, Buffer>;\n  readonly bufferAttributes: Map<string, BufferAttribute>;\n\n  /** buffer name -> list of buffer attributes */\n  readonly bufferNameAttributes: Map<string, BufferAttribute[]>;\n\n  constructor(source: VertexObjectDescriptor | VertexObjectBuffer, capacityOrBuffersData: number | VertexObjectBuffersData) {\n    let buffersData: VertexObjectBuffersData | undefined;\n    if (typeof capacityOrBuffersData === 'number') {\n      this.capacity = capacityOrBuffersData;\n    } else {\n      buffersData = capacityOrBuffersData;\n      this.capacity = buffersData.capacity;\n    }\n\n    if (source instanceof VertexObjectBuffer) {\n      this.descriptor = source.descriptor;\n      this.attributeNames = source.attributeNames;\n      this.bufferAttributes = source.bufferAttributes;\n      this.bufferNameAttributes = source.bufferNameAttributes;\n      this.buffers = new Map();\n\n      for (const [bufferName, buffer] of source.buffers) {\n        this.buffers.set(bufferName, {\n          bufferName,\n          itemSize: buffer.itemSize,\n          dataType: buffer.dataType,\n          usageType: buffer.usageType,\n          typedArray: createTypedArray(buffer.dataType, this.capacity * this.descriptor.vertexCount * buffer.itemSize),\n        });\n      }\n    } else {\n      this.descriptor = source;\n      this.buffers = new Map();\n      this.bufferAttributes = new Map();\n      this.attributeNames = Object.freeze(Array.from(this.descriptor.attributeNames).sort());\n\n      for (const attributeName of this.attributeNames) {\n        const attribute = this.descriptor.getAttribute(attributeName);\n        const {bufferName} = attribute;\n        let offset = 0;\n        if (this.buffers.has(bufferName)) {\n          const buffer = this.buffers.get(bufferName);\n          offset = buffer.itemSize;\n          buffer.itemSize += attribute.size;\n        } else {\n          this.buffers.set(bufferName, {\n            bufferName,\n            itemSize: attribute.size,\n            dataType: attribute.dataType,\n            usageType: attribute.usageType,\n            typedArray: undefined,\n          });\n        }\n        this.bufferAttributes.set(attributeName, {\n          bufferName,\n          attributeName,\n          offset,\n        });\n      }\n\n      for (const buffer of this.buffers.values()) {\n        buffer.typedArray =\n          buffersData?.buffers[buffer.bufferName] ??\n          createTypedArray(buffer.dataType, this.capacity * this.descriptor.vertexCount * buffer.itemSize);\n      }\n\n      this.bufferNameAttributes = new Map();\n      for (const bufAttr of this.bufferAttributes.values()) {\n        const {bufferName} = bufAttr;\n        if (this.bufferNameAttributes.has(bufferName)) {\n          this.bufferNameAttributes.get(bufferName).push(bufAttr);\n        } else {\n          this.bufferNameAttributes.set(bufferName, [bufAttr]);\n        }\n      }\n    }\n\n    if (!this.descriptor.voPrototype) {\n      this.descriptor.voPrototype = createVertexObjectPrototype(this, this.descriptor.basePrototype);\n    }\n  }\n\n  copy(otherVob: VertexObjectBuffer, objectOffset = 0): void {\n    const {vertexCount} = this.descriptor;\n    for (const {bufferName, typedArray, itemSize} of this.buffers.values()) {\n      typedArray.set(otherVob.buffers.get(bufferName).typedArray, objectOffset * vertexCount * itemSize);\n    }\n  }\n\n  clone(): VertexObjectBuffer {\n    const clone = new VertexObjectBuffer(this, this.capacity);\n    clone.copy(this);\n    return clone;\n  }\n\n  copyWithin(target: number, start: number, end = this.capacity): void {\n    const {vertexCount} = this.descriptor;\n    for (const {typedArray, itemSize} of this.buffers.values()) {\n      typedArray.copyWithin(target * vertexCount * itemSize, start * vertexCount * itemSize, end * vertexCount * itemSize);\n    }\n  }\n\n  copyAttributes(attributes: Record<string, ArrayLike<number>>, objectOffset = 0): number {\n    let copiedObjCount = 0;\n    for (const [attrName, data] of Object.entries(attributes)) {\n      const attr = this.bufferAttributes.get(attrName);\n      if (attr) {\n        let attrObjCount = 0;\n        const buffer = this.buffers.get(attr.bufferName);\n        const {vertexCount} = this.descriptor;\n        const attrSize = this.descriptor.getAttribute(attrName).size;\n        let idx = 0;\n        let bufIdx = objectOffset * vertexCount * buffer.itemSize;\n        while (idx < data.length && attrObjCount + objectOffset < this.capacity) {\n          for (let i = 0; i < vertexCount; i++) {\n            buffer.typedArray.set(Array.prototype.slice.call(data, idx, idx + attrSize), bufIdx + attr.offset);\n            idx += attrSize;\n            bufIdx += buffer.itemSize;\n          }\n          ++attrObjCount;\n        }\n        if (attrObjCount > copiedObjCount) {\n          copiedObjCount = attrObjCount;\n        }\n      }\n    }\n    return copiedObjCount;\n  }\n\n  toAttributeArrays(attributeNames: string[], start = 0, end = this.capacity): Record<string, TypedArray> {\n    return Object.fromEntries(\n      attributeNames.map((attrName) => {\n        const attr = this.bufferAttributes.get(attrName);\n        if (attr) {\n          const buffer = this.buffers.get(attr.bufferName);\n          const {vertexCount} = this.descriptor;\n          const attrSize = this.descriptor.getAttribute(attrName).size;\n\n          const targetArray = createTypedArray(buffer.dataType, (end - start) * vertexCount * attrSize);\n\n          let targetIdx = 0;\n          let bufferIdx = start * vertexCount * buffer.itemSize + attr.offset;\n\n          for (let objIdx = start; objIdx < end; objIdx++) {\n            for (let i = 0; i < vertexCount; i++) {\n              targetArray.set(buffer.typedArray.subarray(bufferIdx, bufferIdx + attrSize), targetIdx);\n              targetIdx += attrSize;\n              bufferIdx += buffer.itemSize;\n            }\n          }\n          return [attrName, targetArray];\n        }\n        return [attrName];\n      }),\n    );\n  }\n}\n","import {VertexAttributeDataType, VertexAttributeDescription, VertexAttributeUsageType} from './types';\n\n/**\n * @category Vertex Objects\n */\nexport class VertexAttributeDescriptor {\n  private readonly description: VertexAttributeDescription;\n\n  readonly name: string;\n\n  constructor(name: string, description: VertexAttributeDescription) {\n    this.name = name;\n    this.description = description;\n  }\n\n  get dataType(): VertexAttributeDataType {\n    return this.description.type ?? 'float32';\n  }\n\n  get normalizedData(): boolean {\n    return Boolean(this.description.normalized);\n  }\n\n  get usageType(): VertexAttributeUsageType {\n    return this.description.usage ?? 'static';\n  }\n\n  get autoTouch(): boolean {\n    return this.description.autoTouch ?? this.usageType !== 'static';\n  }\n\n  get size(): number {\n    // @ts-ignore\n    return this.description.size ?? this.description.components?.length ?? 1;\n  }\n\n  get hasComponents(): boolean {\n    // @ts-ignore\n    return this.description.components?.length > 0;\n  }\n\n  get components(): string[] {\n    // @ts-ignore\n    return this.description.components ?? [];\n  }\n\n  get bufferName(): string {\n    return `${this.usageType}_${this.dataType}${this.normalizedData ? 'N' : ''}`;\n  }\n}\n","import {VertexAttributeDescriptor} from './VertexAttributeDescriptor';\nimport {VertexObjectDescription} from './types';\n\n/**\n * @category Vertex Objects\n */\nexport class VertexObjectDescriptor {\n  private readonly description: VertexObjectDescription;\n\n  readonly attributes: Map<string, VertexAttributeDescriptor>;\n  readonly bufferNames: Set<string>;\n  readonly basePrototype: Object | null | undefined;\n\n  voPrototype: Object; // initialization is delayed and is done by ..\n  // .. the first VertexObjectBuffer that uses this descriptor\n  // TODO add test for this case\n\n  constructor(description: VertexObjectDescription) {\n    this.description = description;\n    this.attributes = new Map();\n    this.bufferNames = new Set();\n    Object.entries(this.description.attributes).forEach(([attrName, attrDesc]) => {\n      const descriptor = new VertexAttributeDescriptor(attrName, attrDesc);\n      this.attributes.set(attrName, descriptor);\n      this.bufferNames.add(descriptor.bufferName);\n    });\n    this.basePrototype = description.basePrototype;\n  }\n\n  /** Returns `vertexCount` or `1` */\n  get vertexCount(): number {\n    return this.description.vertexCount ?? 1;\n  }\n\n  /** Returns `meshCount` or `1` */\n  get meshCount(): number {\n    return this.description.meshCount ?? 1;\n  }\n\n  /**\n   * Calculate the instance count if your `meshCount` is greater than 1,\n   * otherwise return the given capacity\n   * TODO remove?!\n   */\n  getInstanceCount(capacity: number): number {\n    const meshCount = this.description.meshCount ?? 1;\n    return meshCount > 1 ? Math.ceil(capacity / meshCount) : capacity;\n  }\n\n  get hasIndices(): boolean {\n    return this.description.indices?.length > 0;\n  }\n\n  get indices(): number[] {\n    return this.description.indices ?? [];\n  }\n\n  get attributeNames(): string[] {\n    return Array.from(this.attributes.keys());\n  }\n\n  getAttribute(name: string): VertexAttributeDescriptor | undefined {\n    return this.attributes.get(name);\n  }\n}\n","import {VertexObjectBuffer} from './VertexObjectBuffer';\nimport {VertexObjectDescriptor} from './VertexObjectDescriptor';\nimport {voBuffer, voIndex} from './constants';\nimport {VertexObjectDescription, VO} from './types';\n\nimport {VertexObjectBuffersData} from '.';\n\nconst createVertexObject = (descriptor: VertexObjectDescriptor, buffer: VertexObjectBuffer, objectIndex: number) =>\n  Object.create(descriptor.voPrototype, {\n    [voBuffer]: {\n      value: buffer,\n      writable: true,\n    },\n    [voIndex]: {\n      value: objectIndex,\n      writable: true,\n    },\n  });\n\n/**\n * @category Vertex Objects\n */\nexport class VertexObjectPool<VOType = VO> {\n  static setVoIndex(vo: VO, idx: number): VO {\n    vo[voIndex] = idx;\n    return vo;\n  }\n\n  readonly descriptor: VertexObjectDescriptor;\n  readonly capacity: number;\n\n  buffer: VertexObjectBuffer;\n\n  #index: Array<VOType & VO>;\n  #usedCount = 0;\n\n  constructor(descriptor: VertexObjectDescriptor | VertexObjectDescription, capacityOrData: number | VertexObjectBuffersData) {\n    this.descriptor = descriptor instanceof VertexObjectDescriptor ? descriptor : new VertexObjectDescriptor(descriptor);\n    if (typeof capacityOrData === 'number') {\n      const capacity = capacityOrData;\n      this.capacity = capacity;\n      this.buffer = new VertexObjectBuffer(this.descriptor, capacity);\n    } else {\n      const buffersData = capacityOrData;\n      this.capacity = buffersData.capacity;\n      this.#usedCount = buffersData.usedCount;\n      this.buffer = new VertexObjectBuffer(this.descriptor, buffersData);\n    }\n    this.#index = new Array(this.capacity);\n  }\n\n  get usedCount(): number {\n    return this.#usedCount;\n  }\n\n  set usedCount(value: number) {\n    // TODO test\n    if (value < this.#usedCount) {\n      this.#index.fill(undefined, value, this.#usedCount);\n    }\n    this.#usedCount = value < this.capacity ? value : this.capacity;\n  }\n\n  get availableCount(): number {\n    return this.capacity - this.#usedCount;\n  }\n\n  clear(): void {\n    this.usedCount = 0;\n  }\n\n  createVO(): VOType & VO {\n    if (this.#usedCount < this.capacity) {\n      const idx = this.usedCount++;\n      const vo = createVertexObject(this.descriptor, this.buffer, idx);\n      this.#index[idx] = vo;\n      return vo;\n    }\n  }\n\n  createFromAttributes(attributes: Record<string, ArrayLike<number>>): [objectCount: number, firstObjectIdx: number] {\n    const firstObjectIdx = this.#usedCount;\n    const objectCount = this.buffer.copyAttributes(attributes, firstObjectIdx);\n    this.#usedCount += objectCount;\n    return [objectCount, firstObjectIdx];\n  }\n\n  /**\n   * The fastest variant is when the VO was the last one created,\n   * otherwise the underlying buffer(s) have to be recopied internally.\n   */\n  freeVO(vo: VO): void {\n    if (vo[voBuffer] === this.buffer) {\n      const idx = vo[voIndex];\n      const lastUsedIdx = this.#usedCount - 1;\n      if (idx === lastUsedIdx) {\n        this.#index[idx] = undefined;\n      } else {\n        this.buffer.copyWithin(idx, lastUsedIdx, lastUsedIdx + 1);\n        const lastUsedVO = this.#index[lastUsedIdx];\n        lastUsedVO[voIndex] = idx;\n        this.#index[idx] = lastUsedVO;\n      }\n      this.usedCount--;\n      vo[voBuffer] = undefined;\n    }\n  }\n\n  getVO(idx: number): (VOType & VO) | undefined {\n    let vo = this.#index[idx];\n    if (vo == null && idx < this.#usedCount) {\n      vo = createVertexObject(this.descriptor, this.buffer, idx);\n      this.#index[idx] = vo;\n    }\n    return vo;\n  }\n\n  toBuffersData(): VertexObjectBuffersData {\n    return {\n      capacity: this.capacity,\n      usedCount: this.usedCount,\n      buffers: Object.fromEntries(\n        Array.from(this.buffer.buffers.values()).map((buffer) => [buffer.bufferName, buffer.typedArray]),\n      ),\n    };\n  }\n}\n","import {DynamicDrawUsage, StaticDrawUsage, StreamDrawUsage} from 'three';\n\nimport {DrawUsageType, VertexAttributeUsageType} from './types';\n\nexport function toDrawUsage(usage: VertexAttributeUsageType): DrawUsageType {\n  switch (usage) {\n    case 'dynamic':\n      return DynamicDrawUsage;\n    case 'stream':\n      return StreamDrawUsage;\n    default:\n      return StaticDrawUsage;\n  }\n}\n","import {BufferAttribute, BufferGeometry, InterleavedBuffer, InterleavedBufferAttribute} from 'three';\n\nimport {VertexObjectPool} from './VertexObjectPool';\nimport {createIndicesArray} from './createIndicesArray';\nimport {toDrawUsage} from './toDrawUsage';\nimport {BufferLike} from './types';\n\nexport function initializeAttributes(geometry: BufferGeometry, pool: VertexObjectPool, buffers: Map<string, BufferLike>): void {\n  const {descriptor, capacity} = pool;\n  if (descriptor.hasIndices) {\n    const {indices} = descriptor;\n    const bufAttr = new BufferAttribute(createIndicesArray(indices, capacity), 3);\n    bufAttr.count = capacity * indices.length;\n    geometry.setIndex(bufAttr);\n  }\n  for (const buffer of pool.buffer.buffers.values()) {\n    const attributes = pool.buffer.bufferNameAttributes.get(buffer.bufferName);\n    if (attributes.length > 1) {\n      const interleavedBuffer = new InterleavedBuffer(buffer.typedArray, buffer.itemSize);\n      interleavedBuffer.setUsage(toDrawUsage(buffer.usageType));\n      buffers.set(buffer.bufferName, interleavedBuffer);\n      for (const bufAttr of attributes) {\n        const attrDesc = descriptor.attributes.get(bufAttr.attributeName);\n        const attr = new InterleavedBufferAttribute(interleavedBuffer, attrDesc.size, bufAttr.offset, attrDesc.normalizedData);\n        attr.name = bufAttr.attributeName;\n        geometry.setAttribute(attrDesc.name, attr);\n      }\n    } else {\n      const bufAttr = attributes[0];\n      const attrDesc = descriptor.attributes.get(bufAttr.attributeName);\n      const attr = new BufferAttribute(buffer.typedArray, buffer.itemSize, attrDesc.normalizedData);\n      attr.setUsage(toDrawUsage(buffer.usageType));\n      attr.name = bufAttr.attributeName;\n      buffers.set(buffer.bufferName, attr);\n      geometry.setAttribute(attrDesc.name, attr);\n    }\n  }\n}\n","export function createIndicesArray(indices: number[], count: number): Uint32Array {\n  const itemCount = indices.length;\n  const arr = new Uint32Array(count * itemCount);\n  const stride = Math.max(...indices) + 1;\n\n  for (let i = 0; i < count; i++) {\n    for (let j = 0; j < itemCount; j++) {\n      arr[i * itemCount + j] = indices[j] + i * stride;\n    }\n  }\n\n  return arr;\n}\n","import {VertexObjectPool} from './VertexObjectPool';\nimport {BufferLike} from './types';\n\nexport function selectAttributes(pool: VertexObjectPool, buffers: Map<string, BufferLike>, attrNames: string[]): BufferLike[] {\n  const attrs = new Set<string>();\n  for (const name of attrNames) {\n    const bufAttr = pool.buffer.bufferAttributes.get(name);\n    if (bufAttr) {\n      attrs.add(bufAttr.bufferName);\n    }\n  }\n  return Array.from(attrs.values()).map((bufferName) => buffers.get(bufferName));\n}\n","import {toDrawUsage} from './toDrawUsage';\nimport {BufferLike, VertexAttributeUsageType} from './types';\n\nexport function selectBuffers(\n  buffers: Map<string, BufferLike>,\n  bufferTypes: {\n    [Type in VertexAttributeUsageType]?: boolean;\n  },\n): BufferLike[] {\n  const results = [];\n  for (const [usageType, needsUpdate] of Object.entries(bufferTypes)) {\n    if (needsUpdate === true) {\n      const drawUsage = toDrawUsage(usageType as VertexAttributeUsageType);\n      results.push(...Array.from(buffers.values()).filter((buffer) => buffer.usage === drawUsage));\n    }\n  }\n  return results;\n}\n","import {BufferGeometry, InstancedBufferGeometry} from 'three';\n\nimport {VertexObjectDescriptor} from './VertexObjectDescriptor';\nimport {VertexObjectPool} from './VertexObjectPool';\nimport {initializeAttributes} from './initializeAttributes';\nimport {initializeInstancedAttributes} from './initializeInstancedAttributes';\nimport {selectAttributes} from './selectAttributes';\nimport {selectBuffers} from './selectBuffers';\nimport {BufferLike, VertexAttributeUsageType, VertexObjectDescription, VO} from './types';\n\ntype TouchBuffersType = {[Type in VertexAttributeUsageType]?: boolean};\n\ntype TouchInstancedBuffersType = {\n  base?: TouchBuffersType;\n  instanced?: TouchBuffersType;\n};\n\n/**\n * @category Vertex Objects\n */\nexport class InstancedVertexObjectGeometry<\n  VOInstancedType extends VO = VO,\n  VOBaseType extends VO = VO,\n> extends InstancedBufferGeometry {\n  readonly basePool?: VertexObjectPool<VOBaseType>;\n  readonly baseBuffers?: Map<string, BufferLike>;\n\n  readonly instancedPool: VertexObjectPool<VOInstancedType>;\n  readonly instancedBuffers: Map<string, BufferLike> = new Map();\n\n  constructor(\n    ...args:\n      | [VertexObjectPool<VOInstancedType> | VertexObjectDescriptor | VertexObjectDescription, number, BufferGeometry]\n      | [\n          VertexObjectPool<VOInstancedType> | VertexObjectDescriptor | VertexObjectDescription,\n          number,\n          VertexObjectPool<VOBaseType> | VertexObjectDescriptor | VertexObjectDescription,\n          number?,\n        ]\n  ) {\n    super();\n    const [instancedSource, instancedCapacity] = args;\n    this.instancedPool =\n      instancedSource instanceof VertexObjectPool ? instancedSource : new VertexObjectPool(instancedSource, instancedCapacity);\n    this.name = 'InstancedVertexObjectGeometry';\n    if (args[2] instanceof BufferGeometry) {\n      this.copy(args[2]);\n    } else {\n      const baseSource = args[2];\n      const baseCapacity = args[3] ?? 1;\n      this.basePool = baseSource instanceof VertexObjectPool ? baseSource : new VertexObjectPool(baseSource, baseCapacity);\n      this.baseBuffers = new Map();\n      initializeAttributes(this, this.basePool, this.baseBuffers);\n    }\n    initializeInstancedAttributes(this, this.instancedPool, this.instancedBuffers);\n  }\n\n  touchAttributes(...attrNames: string[]): void {\n    if (this.basePool) {\n      selectAttributes(this.basePool, this.baseBuffers, attrNames).forEach((buffer) => {\n        buffer.needsUpdate = true;\n      });\n    }\n    selectAttributes(this.instancedPool, this.instancedBuffers, attrNames).forEach((buffer) => {\n      buffer.needsUpdate = true;\n    });\n  }\n\n  touchBuffers(bufferTypes: TouchInstancedBuffersType | TouchBuffersType): void {\n    if ('base' in bufferTypes || 'instanced' in bufferTypes) {\n      if (bufferTypes.base && this.baseBuffers) {\n        selectBuffers(this.baseBuffers, bufferTypes.base).forEach((buffer) => {\n          buffer.needsUpdate = true;\n        });\n      }\n      if (bufferTypes.instanced) {\n        selectBuffers(this.instancedBuffers, bufferTypes.instanced).forEach((buffer) => {\n          buffer.needsUpdate = true;\n        });\n      }\n    } else {\n      selectBuffers(this.instancedBuffers, bufferTypes as TouchBuffersType).forEach((buffer) => {\n        buffer.needsUpdate = true;\n      });\n    }\n  }\n\n  touch(...args: Array<string | TouchBuffersType | TouchInstancedBuffersType>): void {\n    const attrNames: string[] = [];\n    let buffers: TouchBuffersType | TouchInstancedBuffersType;\n    args.forEach((arg) => {\n      if (typeof arg === 'string') {\n        attrNames.push(arg);\n      } else {\n        buffers = {...buffers, ...arg};\n      }\n    });\n    if (attrNames.length) {\n      this.touchAttributes(...attrNames);\n    }\n    if (buffers) {\n      this.touchBuffers(buffers);\n    }\n  }\n\n  update(): void {\n    this.#autoTouchAttributes();\n    this.#updateDrawRange();\n    this.instanceCount = this.instancedPool.usedCount;\n  }\n\n  #updateDrawRange = (): void => {\n    if (this.basePool) {\n      this.setDrawRange(\n        0,\n        this.basePool.descriptor.hasIndices\n          ? this.basePool.usedCount * this.basePool.descriptor.indices.length\n          : this.basePool.usedCount * this.basePool.descriptor.vertexCount,\n      );\n    } else {\n      this.setDrawRange(0, Infinity);\n    }\n  };\n\n  #autoTouchAttributes = (): void => {\n    const autoTouchAttrs = this.#getAutoTouchAttributeNames();\n    if (autoTouchAttrs.length) {\n      this.touchAttributes(...autoTouchAttrs);\n    }\n  };\n\n  #autoTouchAttrNames?: string[];\n\n  #getAutoTouchAttributeNames = (): string[] => {\n    if (!this.#autoTouchAttrNames) {\n      const attrNames = [...Array.from(this.instancedPool.descriptor.attributes.values())];\n      if (this.basePool) {\n        attrNames.push(...Array.from(this.basePool.descriptor.attributes.values()));\n      }\n      this.#autoTouchAttrNames = attrNames.filter((attr) => attr.autoTouch).map((attr) => attr.name);\n    }\n    return this.#autoTouchAttrNames;\n  };\n}\n","import {BufferGeometry, InstancedBufferAttribute, InstancedInterleavedBuffer, InterleavedBufferAttribute} from 'three';\n\nimport {VertexObjectPool} from './VertexObjectPool';\nimport {toDrawUsage} from './toDrawUsage';\nimport {BufferLike} from './types';\n\nexport function initializeInstancedAttributes(\n  geometry: BufferGeometry,\n  pool: VertexObjectPool,\n  buffers: Map<string, BufferLike>,\n): void {\n  const {descriptor} = pool;\n  const meshPerAttribute = descriptor.meshCount;\n  for (const buffer of pool.buffer.buffers.values()) {\n    const attributes = pool.buffer.bufferNameAttributes.get(buffer.bufferName);\n    if (attributes.length > 1) {\n      const interleavedBuffer = new InstancedInterleavedBuffer(buffer.typedArray, buffer.itemSize, meshPerAttribute);\n      interleavedBuffer.setUsage(toDrawUsage(buffer.usageType));\n      buffers.set(buffer.bufferName, interleavedBuffer);\n      for (const bufAttr of attributes) {\n        const attrDesc = descriptor.attributes.get(bufAttr.attributeName);\n        const attr = new InterleavedBufferAttribute(interleavedBuffer, attrDesc.size, bufAttr.offset, attrDesc.normalizedData);\n        attr.name = bufAttr.attributeName;\n        geometry.setAttribute(attrDesc.name, attr);\n      }\n    } else {\n      const bufAttr = attributes[0];\n      const attrDesc = descriptor.attributes.get(bufAttr.attributeName);\n      const attr = new InstancedBufferAttribute(buffer.typedArray, buffer.itemSize, attrDesc.normalizedData, meshPerAttribute);\n      attr.setUsage(toDrawUsage(buffer.usageType));\n      attr.name = bufAttr.attributeName;\n      buffers.set(buffer.bufferName, attr);\n      geometry.setAttribute(attrDesc.name, attr);\n    }\n  }\n}\n","export const isPowerOf2 = (n: number): boolean => n !== 0 && (n & (n - 1)) === 0;\n","import {ImageLoader} from 'three';\n\nimport {TextureCoords} from './TextureCoords';\nimport {findNextPowerOf2} from './findNextPowerOf2';\nimport {isPowerOf2} from './isPowerOf2';\n\n/**\n * @category Texture Mapping\n */\nexport interface ImageWithTexCoords {\n  imgEl: HTMLImageElement | HTMLCanvasElement;\n  texCoords: TextureCoords;\n}\n\ntype OnImageLoadCallback = (image: ImageWithTexCoords) => void;\ntype OnErrorCallback = ((event: Event) => void) | undefined;\n\n/**\n * @category Texture Mapping\n */\nexport class PowerOf2ImageLoader {\n  #imageLoader?: ImageLoader;\n\n  get imageLoader(): ImageLoader {\n    if (!this.#imageLoader) {\n      this.#imageLoader = new ImageLoader();\n    }\n    return this.#imageLoader;\n  }\n\n  set imageLoader(loader: ImageLoader) {\n    this.#imageLoader = loader;\n  }\n\n  load(url: string, onLoadCallback: OnImageLoadCallback, onErrorCallback?: OnErrorCallback): void {\n    this.imageLoader.load(\n      url,\n      (img: HTMLImageElement) => {\n        if (!isPowerOf2(img.width) || !isPowerOf2(img.height)) {\n          const width = findNextPowerOf2(img.width);\n          const height = findNextPowerOf2(img.height);\n\n          const canvas = document.createElement('canvas');\n          canvas.width = width;\n          canvas.height = height;\n          canvas.getContext('2d').drawImage(img, 0, 0);\n\n          const imgTexCoords = new TextureCoords(0, 0, width, height);\n          const texCoords = new TextureCoords(imgTexCoords, 0, 0, img.width, img.height);\n\n          onLoadCallback({imgEl: canvas, texCoords});\n        } else {\n          onLoadCallback({\n            imgEl: img,\n            texCoords: new TextureCoords(0, 0, img.width, img.height),\n          });\n        }\n      },\n      undefined,\n      onErrorCallback,\n    );\n  }\n\n  loadAsync(url: string): Promise<ImageWithTexCoords> {\n    return new Promise((resolve, reject) => {\n      this.load(url, resolve, reject);\n    });\n  }\n}\n","const isNumber = (x: string | number): x is number => typeof x === 'number';\n\nfunction add(a: string | number, b: string | number): string | number {\n  if (isNumber(a) && isNumber(b)) {\n    return a + b;\n  } else if (isNumber(a)) {\n    switch (a) {\n      case 0:\n        return b;\n      default:\n        return `${a} + ${b}`;\n    }\n  } else if (isNumber(b)) {\n    switch (b) {\n      case 0:\n        return a;\n      default:\n        return `${a} + ${b}`;\n    }\n  } else {\n    return `${a} + ${b}`;\n  }\n}\n\nfunction sub(a: string | number, b: string | number): string | number {\n  if (isNumber(a) && isNumber(b)) {\n    return a - b;\n  } else if (isNumber(a)) {\n    switch (a) {\n      case 0:\n        return `-${b}`;\n      default:\n        return `${a} - ${b}`;\n    }\n  } else if (isNumber(b)) {\n    switch (b) {\n      case 0:\n        return a;\n      default:\n        return `${a} - ${b}`;\n    }\n  } else {\n    return `${a} - ${b}`;\n  }\n}\n\nfunction mul(a: string | number, b: string | number): string | number {\n  if (isNumber(b) && isNumber(a)) {\n    return a * b;\n  } else if (isNumber(a)) {\n    switch (a) {\n      case 0:\n        return 0;\n      case 1:\n        return b;\n      default:\n        return `${a} * ${b}`;\n    }\n  } else if (isNumber(b)) {\n    switch (b) {\n      case 0:\n        return 0;\n      case 1:\n        return a;\n      default:\n        return `${a} * ${b}`;\n    }\n  } else {\n    return `${a} * ${b}`;\n  }\n}\n\nfunction asFloat(number: string | number): string {\n  const str = `${number}`.trim();\n  if (str.match(/^[0-9]+$/)) {\n    return `${str}.0`;\n  }\n  return str;\n}\n\nconst ret = (res: string): string => `return ${res};`;\n\nfunction mat4(\n  m00: string | number = 0,\n  m01: string | number = 0,\n  m02: string | number = 0,\n  m03: string | number = 0,\n  m10: string | number = 0,\n  m11: string | number = 0,\n  m12: string | number = 0,\n  m13: string | number = 0,\n  m20: string | number = 0,\n  m21: string | number = 0,\n  m22: string | number = 0,\n  m23: string | number = 0,\n  m30: string | number = 0,\n  m31: string | number = 0,\n  m32: string | number = 0,\n  m33: string | number = 1,\n  as = asFloat,\n): string {\n  const toStr = as || ((x) => `${x}`);\n  return `mat4(${toStr(m00)}, ${toStr(m01)}, ${toStr(m02)}, ${toStr(m03)}, ${toStr(m10)}, ${toStr(m11)}, ${toStr(m12)}, ${toStr(\n    m13,\n  )}, ${toStr(m20)}, ${toStr(m21)}, ${toStr(m22)}, ${toStr(m23)}, ${toStr(m30)}, ${toStr(m31)}, ${toStr(m32)}, ${toStr(m33)})`;\n}\n\nconst rotate = (funcName = 'rotate', x = 0.0, y = 0.0, z = 1.0): string => `\nmat4 ${funcName}(float angle) {\n  float s = sin(angle);\n  float c = cos(angle);\n  float oc = 1.0 - c;\n  ${ret(\n    mat4(\n      add(mul('oc', x * x), 'c'),\n      sub(mul('oc', x * y), mul(z, 's')),\n      add(mul('oc', z * x), mul(y, 's')),\n      0,\n      add(mul('oc', x * y), mul(z, 's')),\n      add(mul('oc', y * y), 'c'),\n      sub(mul('oc', y * z), mul(x, 's')),\n      0,\n      sub(mul('oc', z * x), mul(y, 's')),\n      add(mul('oc', y * z), mul(x, 's')),\n      add(mul('oc', z * z), 'c'),\n    ),\n  )}\n}`;\n\nconst rotateZ = (funcName = 'rotateZ'): string => rotate(funcName, 0, 0, 1);\n\nexport const ShaderTool = {\n  add,\n  asFloat,\n  mat4,\n  mul,\n  ret,\n  rotate,\n  rotateZ,\n  sub,\n};\n","import {NearestFilter, TextureFilter, Texture, TextureLoader, LinearFilter, WebGLRenderer} from 'three';\n\nimport {TextureSource} from './types';\n\n/**\n * @category Texture Mapping\n */\nexport interface TextureOptions {\n  magFilter: TextureFilter;\n  minFilter: TextureFilter;\n  anisotrophy: number;\n  flipY: boolean;\n}\n\nconst TextureClasses = {\n  anisotrophy: {\n    anisotrophy: Infinity,\n  },\n  'anisotrophy-2': {\n    anisotrophy: 2,\n  },\n  'anisotrophy-4': {\n    anisotrophy: 4,\n  },\n  'no-anisotrophy': {\n    anisotrophy: 0,\n  },\n  nearest: {\n    magFilter: NearestFilter,\n    minFilter: NearestFilter,\n  },\n  'mag-nearest': {\n    magFilter: NearestFilter,\n  },\n  'min-nearest': {\n    minFilter: NearestFilter,\n  },\n  linear: {\n    magFilter: LinearFilter,\n    minFilter: LinearFilter,\n  },\n  'mag-linear': {\n    magFilter: LinearFilter,\n  },\n  'min-linear': {\n    minFilter: LinearFilter,\n  },\n  flipy: {\n    flipY: true,\n  },\n  'no-flipy': {\n    flipY: false,\n  },\n};\n\n/**\n * @category Texture Mapping\n */\nexport type TextureOptionClasses = keyof typeof TextureClasses;\n\nconst TextureClassPriority: Record<TextureOptionClasses, number> = {\n  'no-anisotrophy': 1000,\n  'anisotrophy-2': 500,\n  'anisotrophy-4': 250,\n  anisotrophy: 0,\n\n  nearest: 1000,\n  'mag-nearest': 500,\n  'min-nearest': 500,\n\n  linear: 1000,\n  'mag-linear': 500,\n  'min-linear': 500,\n\n  flipy: 10,\n  'no-flipy': 0,\n};\n\n/**\n * @category Texture Mapping\n */\nexport class TextureFactory {\n  #maxAnisotrophy = 0;\n  #defaultOptions: Partial<TextureOptions>;\n\n  textureLoader: TextureLoader;\n\n  constructor(\n    maxAnisotrophyOrRenderer: number | WebGLRenderer = 0,\n    defaultClassNames: Array<TextureOptionClasses> = ['nearest'],\n    defaultOptions?: Partial<TextureOptions>,\n  ) {\n    this.#maxAnisotrophy =\n      typeof maxAnisotrophyOrRenderer === 'number'\n        ? maxAnisotrophyOrRenderer\n        : maxAnisotrophyOrRenderer.capabilities.getMaxAnisotropy();\n    this.#defaultOptions = defaultOptions ?? {\n      anisotrophy: 0,\n      flipY: false,\n    };\n    this.#defaultOptions = this.getOptions(defaultClassNames);\n    this.textureLoader = new TextureLoader();\n  }\n\n  getOptions(classNames: Array<TextureOptionClasses>): Partial<TextureOptions> {\n    const options = Object.assign(\n      {},\n      this.#defaultOptions,\n      ...classNames\n        .map((className) => [TextureClassPriority[className], TextureClasses[className]] as [number, Partial<TextureOptions>])\n        .sort(([a], [b]) => b - a)\n        .map(([, opts]) => opts),\n    );\n    options.anisotrophy = Math.min(options.anisotrophy, this.#maxAnisotrophy);\n    return options;\n  }\n\n  create(source: TextureSource, ...classNames: Array<TextureOptionClasses>): Texture {\n    const texture = new Texture(source);\n    return this.update(texture, ...classNames);\n  }\n\n  update(texture: Texture, ...classNames: Array<TextureOptionClasses>): Texture {\n    Object.assign(texture, this.getOptions(classNames));\n    texture.needsUpdate = true;\n    return texture;\n  }\n\n  load(url: string, ...classNames: Array<TextureOptionClasses>): Texture {\n    return this.textureLoader.load(url, (texture) => {\n      this.update(texture, ...classNames);\n    });\n  }\n}\n","import {Texture} from 'three';\n\nimport {PowerOf2ImageLoader} from './PowerOf2ImageLoader';\nimport {TextureCoords} from './TextureCoords';\nimport {TextureFactory, TextureOptionClasses} from './TextureFactory';\nimport {TextureSource} from './types';\n\n/**\n * @category Texture Mapping\n */\nexport interface TextureData {\n  texture: Texture;\n  imgEl: TextureSource;\n  texCoords: TextureCoords;\n}\n\ntype OnLoadCallback = (textureData: TextureData) => void;\ntype OnErrorCallback = ((event: Event) => void) | undefined;\n\n/**\n * @category Texture Mapping\n */\nexport class TextureFactoryLoader {\n  imageLoader: PowerOf2ImageLoader;\n  textureFactory: TextureFactory;\n\n  constructor(textureFatory: TextureFactory, imageLoader?: PowerOf2ImageLoader) {\n    this.textureFactory = textureFatory;\n    this.imageLoader = imageLoader ?? new PowerOf2ImageLoader();\n  }\n\n  load(\n    url: string,\n    textureClasses: Array<TextureOptionClasses>,\n    onLoadCallback: OnLoadCallback,\n    onErrorCallback?: OnErrorCallback,\n  ): void {\n    this.imageLoader.load(\n      url,\n      (imageData) => {\n        const texture = new Texture(imageData.imgEl);\n        this.textureFactory.update(texture, ...(textureClasses || []));\n\n        onLoadCallback({\n          texture,\n          imgEl: imageData.imgEl,\n          texCoords: imageData.texCoords,\n        });\n      },\n      onErrorCallback,\n    );\n  }\n\n  loadAsync(url: string, textureClasses: Array<TextureOptionClasses>): Promise<TextureData> {\n    return new Promise((resolve, reject) => {\n      this.load(url, textureClasses, resolve, reject);\n    });\n  }\n}\n","import {TextureAtlas} from './TextureAtlas';\nimport {TextureCoords} from './TextureCoords';\n\n/**\n * @category Texture Mapping\n */\nexport interface TexturePackerFrameData {\n  frame: {\n    x: number;\n    y: number;\n    w: number;\n    h: number;\n  };\n}\n\n/**\n * @category Texture Mapping\n */\nexport interface TexturePackerMetaData {\n  image: string;\n  size: {\n    w: number;\n    h: number;\n  };\n}\n\n/**\n * @category Texture Mapping\n */\nexport interface TexturePackerJsonData {\n  frames: {\n    [frameName: string]: TexturePackerFrameData;\n  };\n  meta: TexturePackerMetaData;\n}\n\n/**\n * @category Texture Mapping\n */\nexport class TexturePackerJson {\n  static parse(\n    data: TexturePackerJsonData,\n    parentCoords?: TextureCoords,\n    target?: TextureAtlas,\n  ): [atlas: TextureAtlas, meta: TexturePackerMetaData] {\n    target ??= new TextureAtlas();\n\n    parentCoords ??= new TextureCoords(0, 0, data.meta.size.w, data.meta.size.h);\n\n    for (const [name, {frame}] of Object.entries(data.frames)) {\n      target.add(name, new TextureCoords(parentCoords, frame.x, frame.y, frame.w, frame.h));\n    }\n\n    return [target, data.meta];\n  }\n}\n","import {Texture} from 'three';\n\nimport {PowerOf2ImageLoader} from './PowerOf2ImageLoader';\nimport {TextureCoords} from './TextureCoords';\nimport {TextureFactory} from './TextureFactory';\nimport {TileSet, TileSetOptions} from './TileSet';\nimport {TextureSource} from './types';\n\n/**\n * @category Texture Mapping\n */\nexport interface TileSetData {\n  tileSet: TileSet;\n  texture: Texture;\n  imgEl: TextureSource;\n  texCoords: TextureCoords;\n}\n\ntype OnLoadCallback = (tileSetData: TileSetData) => void;\ntype OnErrorCallback = ((event: Event) => void) | undefined;\n\n/**\n * @category Texture Mapping\n */\nexport class TileSetLoader {\n  imageLoader: PowerOf2ImageLoader;\n  textureFactory: TextureFactory;\n\n  constructor(textureFactory: TextureFactory, imageLoader?: PowerOf2ImageLoader) {\n    this.textureFactory = textureFactory;\n    this.imageLoader = imageLoader ?? new PowerOf2ImageLoader();\n  }\n\n  load(url: string, tileSetOptions: TileSetOptions, onLoadCallback: OnLoadCallback, onErrorCallback?: OnErrorCallback): void {\n    this.imageLoader.load(\n      url,\n      (imageData) => {\n        const texture = new Texture(imageData.imgEl);\n        texture.name = url;\n\n        this.textureFactory.update(texture);\n\n        const tileSet = new TileSet(imageData.texCoords, tileSetOptions);\n\n        onLoadCallback({\n          texture,\n          tileSet,\n          imgEl: imageData.imgEl,\n          texCoords: imageData.texCoords,\n        });\n      },\n      onErrorCallback,\n    );\n  }\n\n  loadAsync(url: string, tileSetOptions: TileSetOptions): Promise<TileSetData> {\n    return new Promise((resolve, reject) => {\n      this.load(url, tileSetOptions, resolve, reject);\n    });\n  }\n}\n","import {BufferGeometry} from 'three';\n\nimport {VertexObjectDescriptor} from './VertexObjectDescriptor';\nimport {VertexObjectPool} from './VertexObjectPool';\nimport {initializeAttributes} from './initializeAttributes';\nimport {selectAttributes} from './selectAttributes';\nimport {selectBuffers} from './selectBuffers';\nimport {BufferLike, VertexAttributeUsageType, VertexObjectDescription} from './types';\n\ntype TouchBuffersType = {[Type in VertexAttributeUsageType]?: boolean};\n\n/**\n * @category Vertex Objects\n */\nexport class VertexObjectGeometry extends BufferGeometry {\n  readonly pool: VertexObjectPool;\n  readonly buffers: Map<string, BufferLike> = new Map();\n\n  constructor(source: VertexObjectPool | VertexObjectDescriptor | VertexObjectDescription, capacity: number) {\n    super();\n    this.pool = source instanceof VertexObjectPool ? source : new VertexObjectPool(source, capacity);\n    this.name = 'VertexObjectGeometry';\n    initializeAttributes(this, this.pool, this.buffers);\n  }\n\n  touchAttributes(...attrNames: string[]): void {\n    selectAttributes(this.pool, this.buffers, attrNames).forEach((buffer) => {\n      buffer.needsUpdate = true;\n    });\n  }\n\n  touchBuffers(bufferTypes: TouchBuffersType): void {\n    selectBuffers(this.buffers, bufferTypes).forEach((buffer) => {\n      buffer.needsUpdate = true;\n    });\n  }\n\n  touch(...args: Array<string | TouchBuffersType>): void {\n    const attrNames: string[] = [];\n    let buffers: TouchBuffersType;\n    args.forEach((arg) => {\n      if (typeof arg === 'string') {\n        attrNames.push(arg);\n      } else {\n        buffers = {...buffers, ...arg};\n      }\n    });\n    if (attrNames.length) {\n      this.touchAttributes(...attrNames);\n    }\n    if (buffers) {\n      this.touchBuffers(buffers);\n    }\n  }\n\n  update(): void {\n    this.#autoTouchAttributes();\n    this.#updateDrawRange();\n  }\n\n  #updateDrawRange = (): void => {\n    this.setDrawRange(\n      0,\n      this.pool.descriptor.hasIndices\n        ? this.pool.usedCount * this.pool.descriptor.indices.length\n        : this.pool.usedCount * this.pool.descriptor.vertexCount,\n    );\n  };\n\n  #autoTouchAttributes = (): void => {\n    const autoTouchAttrs = this.#getAutoTouchAttributeNames();\n    if (autoTouchAttrs.length) {\n      this.touchAttributes(...autoTouchAttrs);\n    }\n  };\n\n  #autoTouchAttrNames?: string[];\n\n  #getAutoTouchAttributeNames = (): string[] => {\n    if (!this.#autoTouchAttrNames) {\n      this.#autoTouchAttrNames = Array.from(this.pool.descriptor.attributes.values())\n        .filter((attr) => attr.autoTouch)\n        .map((attr) => attr.name);\n    }\n    return this.#autoTouchAttrNames;\n  };\n}\n","import {Material, Mesh} from 'three';\n\nimport {InstancedVertexObjectGeometry} from './InstancedVertexObjectGeometry';\n\nimport {VertexObjectGeometry} from './VertexObjectGeometry';\n\n/**\n * @category Vertex Objects\n */\nexport interface VertexObjects {\n  geometry: VertexObjectGeometry | InstancedVertexObjectGeometry;\n}\n\n/**\n * @category Vertex Objects\n */\nexport class VertexObjects extends Mesh {\n  constructor(geometry?: VertexObjectGeometry | InstancedVertexObjectGeometry, material?: Material | Material[]) {\n    super(geometry, material);\n    this.name = 'VertexObjects';\n  }\n\n  onBeforeRender = (): void => {\n    this.geometry?.update();\n  };\n}\n"],"names":["voBuffer","Symbol","voIndex","findNextPowerOf2","x","p","__classPrivateFieldGet","receiver","state","kind","f","TypeError","has","call","value","get","__classPrivateFieldSet","set","rand","max","Math","random","TextureAtlas","constructor","_TextureAtlas_frames","_TextureAtlas_frameNames","Map","add","args","id","this","length","isNamedTextureAtlasArgs","push","coords","data","size","frameId","name","frame","frameNames","match","Array","from","keys","regex","RegExp","filter","test","randomFrameId","randomFrame","randomFrameName","randomIdx","idx","randomFrameIds","count","frameIds","i","randomFrames","frames","randomFrameNames","names","minCoord","current","scalarKey","sizeKey","texCoords","scalar","parent","maxCoord","coord","TextureCoords","y","width","height","clone","flip","root","flipH","FLIP_HORIZONTAL","FLIP_VERTICAL","FLIP_DIAGONAL","flipV","flipD","flipHorizontal","flipVertical","flipDiagonal","s","t","s1","t1","u","v","TileSet","_TileSet_createTextureCoords","baseWidth","baseHeight","baseCoords","padding","margin","spacing","tileCountLimit","tileOuterWidth","tileWidth","tileOuterHeight","tileHeight","tileCount","atlas","firstFrameId","Infinity","xOffsetNext","options","firstId","lastId","lastFrameId","tileId","randomTileId","FrameBasedAnimations","_FrameBasedAnimations_animations","_FrameBasedAnimations_names","Error","toString","isArray","sort","map","frameName","tileSet","firstTileId","duration","animId","bakeDataTexture","includeTextureSize","Boolean","bufSize","animationsMap","sizePerTexture","maxTextureSize","anims","values","totalFramesCount","reduce","sum","anim","minBufSize","getBufferSize","MaxTextureSize","floatsBuffer","animations","curOffset","flatMap","offset","renderFloatsBuffer","Float32Array","DataTexture","RGBAFormat","FloatType","getDescriptorOf","vo","descriptor","createTypedArray","dataType","Float64Array","Uint16Array","Uint32Array","Int32Array","Int16Array","Uint8Array","Uint8ClampedArray","Int8Array","makeAttributeGetter","bufferName","instanceOffset","attrOffset","buffers","typedArray","makeAttributeSetter","makeAttributeValuesGetter","bufferItemSize","vertexCount","attrSize","buf","source","target","subarray","makeAttributeValueSetter","prototype","slice","VertexObjectBuffer","capacityOrBuffersData","buffersData","capacity","attributeNames","bufferAttributes","bufferNameAttributes","buffer","itemSize","usageType","Object","freeze","attributeName","attribute","getAttribute","undefined","bufAttr","voPrototype","basePrototype","props","fromEntries","attrName","attr","AttrName","replace","_match","_m0","m1","toUpperCase","methods","enumerable","hasComponents","components","forEach","component","componentIndex","vertexIndex","create","createVertexObjectPrototype","copy","otherVob","objectOffset","copyWithin","start","end","copyAttributes","attributes","copiedObjCount","entries","attrObjCount","bufIdx","toAttributeArrays","targetArray","targetIdx","bufferIdx","objIdx","VertexAttributeDescriptor","description","type","normalizedData","normalized","usage","autoTouch","VertexObjectDescriptor","bufferNames","Set","attrDesc","meshCount","getInstanceCount","ceil","hasIndices","indices","createVertexObject","objectIndex","writable","VertexObjectPool","capacityOrData","_VertexObjectPool_index","_VertexObjectPool_usedCount","usedCount","setVoIndex","fill","availableCount","clear","createVO","createFromAttributes","firstObjectIdx","objectCount","freeVO","lastUsedIdx","lastUsedVO","getVO","toBuffersData","toDrawUsage","DynamicDrawUsage","StreamDrawUsage","StaticDrawUsage","initializeAttributes","geometry","pool","BufferAttribute","itemCount","arr","stride","j","createIndicesArray","setIndex","interleavedBuffer","InterleavedBuffer","setUsage","InterleavedBufferAttribute","setAttribute","selectAttributes","attrNames","attrs","selectBuffers","bufferTypes","results","needsUpdate","drawUsage","InstancedVertexObjectGeometry","InstancedBufferGeometry","super","_InstancedVertexObjectGeometry_updateDrawRange","basePool","setDrawRange","_InstancedVertexObjectGeometry_autoTouchAttributes","autoTouchAttrs","touchAttributes","_InstancedVertexObjectGeometry_autoTouchAttrNames","_InstancedVertexObjectGeometry_getAutoTouchAttributeNames","instancedPool","instancedSource","instancedCapacity","BufferGeometry","baseSource","baseCapacity","baseBuffers","meshPerAttribute","InstancedInterleavedBuffer","InstancedBufferAttribute","initializeInstancedAttributes","instancedBuffers","touchBuffers","base","instanced","touch","arg","update","instanceCount","isPowerOf2","n","PowerOf2ImageLoader","_PowerOf2ImageLoader_imageLoader","imageLoader","ImageLoader","loader","load","url","onLoadCallback","onErrorCallback","img","imgEl","canvas","document","createElement","getContext","drawImage","imgTexCoords","loadAsync","Promise","resolve","reject","isNumber","a","b","sub","mul","asFloat","number","str","trim","ret","res","mat4","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","as","toStr","rotate","funcName","z","ShaderTool","rotateZ","TextureClasses","anisotrophy","nearest","magFilter","NearestFilter","minFilter","linear","LinearFilter","flipy","flipY","TextureClassPriority","TextureFactory","maxAnisotrophyOrRenderer","defaultClassNames","defaultOptions","_TextureFactory_maxAnisotrophy","_TextureFactory_defaultOptions","capabilities","getMaxAnisotropy","getOptions","textureLoader","TextureLoader","classNames","assign","className","opts","min","texture","Texture","TextureFactoryLoader","textureFatory","textureFactory","textureClasses","imageData","TexturePackerJson","parse","parentCoords","meta","w","h","TileSetLoader","tileSetOptions","VertexObjectGeometry","_VertexObjectGeometry_updateDrawRange","_VertexObjectGeometry_autoTouchAttributes","_VertexObjectGeometry_autoTouchAttrNames","_VertexObjectGeometry_getAutoTouchAttributeNames","VertexObjects","Mesh","material"],"mappings":"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"}